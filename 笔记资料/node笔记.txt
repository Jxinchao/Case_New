~~~~~~~~~~~~~~~~~~~~~ 	nodeJS开始     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
前端：网站 APP 数据交互  用户管理

后端：node PHP Java 

IP:127.0.0.1

后台运行时在服务器，前台运行在浏览器中；

一门后台平台，不是语言；能写后台，内建服务器；
 
Chrome goole 的V8引擎

Node Pageaged Modules

	npm(包管理工具) 输入需要安装的文件或者库 就可以下载下来了

	npm help    指令帮助

	启动node  node.exe 文件名

	在浏览器中输入http://localhost:8888   访问本地路径  8888 监听端口号

	var http = require('http');  //引入http
	
	//createServer   创建服务器

	http.createServer(function(req,res){  //req请求参数  res响应参数

		res.writeHead(200);

		res.end('miss.....');   //end 结束 在浏览器中查看

	}).listen(8888);

	console.log('Server running  at http://')  //在服务器中查看

	

Express 
	Web 应用：是一个基于 Node.js 平台的极简、灵活的 web 
		应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。
	
	API： 丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。

	性能：Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。

	node npm 都会安装到node node_modules 里面

	npm install express -g  //安装express框架  -g 全局安装

	npm install express-generator -g  //安装express命令行

	express -V  //低于4.13版本号用这个

	express --version  //高于4.13.1 版本号用这个  现在的是4.14.1

	mkdir 文件名  //创建文件夹
	express 文件名   //创建项目

	npm install   //安装依赖包 node_modules  因为是内置的，所有不需要有后面的内容

	npm start //启动项目 

	修改端口号：app.js  加入

	app.listen('8888',function(){
		console.log('server start...')
	})

	ctrl+c 两次 停止项目 



	routes  后台文件 js
	views   默认HTML模板 z这样式前后台不分离的在public里面是需要ajax，实现前后端分离





	var express = require('express');   //引入模块
	var index = require('./routes/index');  //引入文件

	var app = express();  //声明 express模块  

	app.use  中间件 
	./routes/index      //自己理解


	module.exports = router;   固定的模式  最后必须加入  不然http 请求不到数据


	固定格式写法 
	var express = require('express'); //引入模块
	var router = express.Router();   //获取对象
 
	router.get('/login',function(req,res){  //1 请求参数 2.响应回调函数  这里的login为后台ajax路径的第二个参数。
		console.log('hello,world')
	})
	module.exports = router;  //输出对象



//获取列表    请求参数     routes里面的就是 
var express = require('express');
var router = express.Router();


router.get('/list',function(requset,response){

  console.log('item list....')

  var teg = requset.param('teg');    //获取请求参数

  var id = requset.param('id');     //获取请求参数

  console.log('teg:'+teg+'id：'+id)
  response.send([
    {uname:'1',name:'Jane',tel:'18235873838',company:'Jane的公司',jibie:'CEO'},
    {uname:'2',name:'Lik',tel:'13994807577',company:'Lik的公司',jibie:'HR'},
    {uname:'3',name:'Jinc',tel:'13453801120',company:'Jinc的公司',jibie:'CEO'},
    {uname:'4',name:'Hwh',tel:'18675013231',company:'Hwh的公司',jibie:'HR'},
    {uname:'5',name:'KK',tel:'47585854949',company:'KK的公司',jibie:'CEO'},
    {uname:'6',name:'kime',tel:'13822228888',company:'Kime的公司',jibie:'CEO'},
    {uname:'7',name:'Fei',tel:'13024585858',company:'Fei的公司',jibie:'CEO'},
    {uname:'8',name:'Feel',tel:'18283338383',company:'Feel的公司',jibie:'CEO'},
    {uname:'9',name:'Tired',tel:'13433338888',company:'Tired的公司',jibie:'CEO'}
  ])

})


module.exports = router;

HTML文件
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <script src="js/jquery-2.1.4.min.js"></script>
      </head>
      <body>
        
        <ul>
          
        </ul>

        <script type="text/javascript">
          $.ajax({
            type:'get',
            url:'http://localhost:8888/item/list?teg=1&id=1',    //请求参数  也可以使用data来传递
            // data:{
            //  teg:1
            // },
            success:function(e){
              console.log(e)
              for(var i = 0;i<e.length;i++){
                $('ul').append('<li>'+e[i].uname+'....'+e[i].name+'.....'+e[i].tel+'...'+e[i].company+'...'+e[i].jibie+'</li>')
              }
            },
            error:function(){
              alert('error.....')
            }
          })
        </script>
      </body>
      </html>

node.js配置路由三种方法：
1. req.body['id'];           // 接收post方法传递的id参数
// a.html
$.ajax({
  type: 'post',
  url: 'http://localhost:8005/custom/del',
  data: {id: 1},
  success: function(e){
    console.log(e);
  }
});
// custom.js
router.post('/del', function(req, res){
  var id = req.body['id'];        // 1
  res.send({flag: 1});
});

2. req.params.id          // 接收get方法传递的参数
// b.js
$.ajax({
  type: 'get',
  url: 'http://localhost:8005/custom/del/1',  
  success: function(e){
    console.log(e);
  }
});
// custom.js
router.get('/del/:id', function(req, res){
  var id = req.params.id;        // 1
  res.send({flag: 1});
});

3. req.query.id              // 接收get方法传递的参数
// c.js
$.ajax({
  type: 'get',
  url: 'http://localhost:8005/custom/del?id=1',  
  success: function(e){
    console.log(e);
  }
});
// custom.js
router.get('/del', function(req, res){
  var id = req.query.id;        // 1
  res.send({flag: 1});
});









数据报错显示意义

	1xx(临时响应)
  表示临时响应并需要请求者继续执行操作的状态码。
  100(继续)请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。
  101(切换协议)请求者已要求服务器切换协议，服务器已确认并准备切换。
  2xx (成功)
  表示成功处理了请求的状态码。
  200(成功)服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。
  201(已创建)请求成功并且服务器创建了新的资源。
  202(已接受)服务器已接受请求，但尚未处理。
  203(非授权信息)服务器已成功处理了请求，但返回的信息可能来自另一来源。
  204(无内容)服务器成功处理了请求，但没有返回任何内容。
  205(重置内容)服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图(例如，清除表单内容以输入新内容)。
  206(部分内容)服务器成功处理了部分 GET 请求。
  3xx (重定向)
  要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。
  300(多种选择)针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。
  301(永久移动)请求的网页已永久移动到新位置。服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。
  302(临时移动)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。
  303(查看其他位置)请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。
  304(缓冲)自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。
  如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应(称为 If-Modified-Since HTTP 标头)。服务器可以告诉搜索引擎的蜘蛛/机器人 自从上次抓取后网页没有变更，进而节省带宽和开销。
  .
  305(使用代理)请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。
  307(临时重定向)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。
  4xx(请求错误)
  这些状态码表示请求可能出错，妨碍了服务器的处理。
  400(错误请求)服务器不理解请求的语法。
  401(未授权)请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。
  403(禁止)服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码(您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息)，可能是您的服务器或主机拒绝了 Googlebot 访问。
  404(未找到)服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。
  如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具"诊断"标签的 robots.txt 页上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置(该文件应当位于顶级域，名为 robots.txt)。
  如果对于 Googlebot 抓取的网址看到此状态码(在"诊断"标签的 HTTP 错误页面上)，则表示 Googlebot 跟随的可能是另一个页面的无效链接(是旧链接或输入有误的链接)。
  405(方法禁用)禁用请求中指定的方法。
  406(不接受)无法使用请求的内容特性响应请求的网页。
  407(需要代理授权)此状态码与 401(未授权)类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。
  408(请求超时)服务器等候请求时发生超时。
  409(冲突)服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。
  410(已删除)如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404(未找到)代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。
  411(需要有效长度)服务器不接受不含有效内容长度标头字段的请求。
  412(未满足前提条件)服务器未满足请求者在请求中设置的其中一个前提条件。
  413(请求实体过大)服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。
  414(请求的 URI 过长)请求的 URI(通常为网址)过长，服务器无法处理。
  415(不支持的媒体类型)请求的格式不受请求页面的支持。
  416(请求范围不符合要求)如果页面无法提供请求的范围，则服务器会返回此状态码。
  417(未满足期望值)服务器未满足"期望"请求标头字段的要求。
  5xx(服务器错误)
  这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。
  500(服务器内部错误)服务器遇到错误，无法完成请求。
  501(尚未实施)服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。
  502(错误网关)服务器作为网关或代理，从上游服务器收到无效响应。
  503(服务不可用)服务器目前无法使用(由于超载或停机维护)。通常，这只是暂时状态。
  504(网关超时)服务器作为网关或代理，但是没有及时从上游服务器收到请求。
  505(HTTP 版本不受支持)服务器不支持请求中所用的 HTTP 协议版本。
~~~~~~~~~~~~~~~~~~~~~   nodeJS结束 	   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~